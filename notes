WHAT IS SCSS
-stands for syntactically Awesome Style Sheet is the superset of CSS. SCSS is the more advanced version of CSS
-it has the file extension of .scss
- you can use SCSS offers variables
-it helps us write better code.
- one of the most important parts of SCSS is nesting, which allows us to write CSS in a similar way to HTML. Instead
of writing a series of selectors every time you're writing a new style, you can create outer class, then pull all
other relevant selectors inside of it.

THE DIFFERENCE BETWEEN SASS AND SCSS:
-Sass supports two different syntaxes. Each one cal load the other, so it's up to you to decide which one to use
- the SCSS syntax uses the file extension .scss. with a few small exceptions, we can use all valid CSS and valid
SCSS as well. so in our project this is the syntax that we are using
- there is also the indented syntax and that can be noted by the file extension .sass we will not be using this.

- so to use sass we have to install node sass
partials:
we can create partial sass files that contain little snippets of css that you can include in other sass files.
THis is a create way to modularize the css. a partial is a Sass file named with a leading underscore. the
underscore lets Sass know that the file is only a partial file and that it should not be generated into CSS file
Sass partials are used with the @use rule.

modules:
-we don't have to keep all the SASS in a sinlge file. we can split up however we want with the @use rule. This
rule loads another SAss file as a module, which means we can refer to its varibles, mixins, and functions with a
names space based on the filename.



CREATING THE NAVIGAITON BAR:
- we just create a normal navigation and we are going to set states using react hooks and these state will be
used to toggle classes in the scss.

-in the base scss file we are using the @import and we are importing the toolbar.scss, this will allow us
access to all of its mixins, funcitons and varibles and combining multiple sheets together. actually the
documentation says to use the @use instead of the @import, they seem the same but for right now, lets just use
@import.

-in our SCSS file we are using the indented code style, this lets us better organize our code.

HOVERING OVER THE LINKS SO AND HAVE THEM CHANGE COLOR:

-we want to make it so that when we hover, it will change the particular hover index of the li and then change
the color of that link and this will be created through the vanilla js functions onMouseEnter and onMouseLeave
- ok so we add a event on the li call onMouseEnter and we setHoverIndex(index) and index is given to us by the
map method because it. The index is the index of the current element being processed in the array.
- then we add another javascript event listener called onMouseLeave and we call setHoverIndex(-1), this is
what will change the color back to normal
- so to reiterate we created the normal navBar component, the interesting thing is that we do not set out the links
in html manually we set them out in the App component.
- inside the app component we create an object literal called nav links and have an array of objects inside of
navLinks, then we pass that as a prop to the NavBar component. This is cool because it makes things more dynamic.

- then in the navBar component we create the jsx of a NavBar, we create a ul element and then inside of that we
map over the props.navLinks with the map method. so for every object in the navLinks array we create a li item
and inside of that li element we create a Link component from react-router-dom, this will let the li link to
somewhere and then to get the words to display in the li we do {link.text}
- so to create the NavBar more dynamically we create an object literal in App component and then passed it as props
to the NavBar component. we then use .map() to loop over and display the proper li elements.

- then we styled it accordingly inside of the toolbar.scss and we used the nesting method to do so.
- then we create two states by using the useState Hook. The first one is hoverIndex and that will be used to change
the color on li elements when we hoverOver them. we initialy have the state set to -1
- to use that state we have added two events on the li element, the first event is called onMouseEnter and the
second one is called onMouseLeave. It is important to remember that the li element is inside of the map method
because that is where it is going to get the index value from.
-so onMouseEnter={()=>setHoverIndex(index)} that will set the value of hoverIndex to what ever the index of the
current item in the map method is. then onMouseLeave={()=>setHoverIndex(-1)}, this sets it back to its original
state. Once we get everything set up, this will allow for the color change to go back to normal.
- we are using an inline style to create the hover over effect  in it we are saying, if the hoverIndex is equal
to the index then set the background to the #999 if it is not then set the background to whatever it was before
- the hoverIndex will be equal to the index if when we hover over that particular item. so the color should
change when we hover over it.
- so that is really cool that it works, when we are going to create a hover effect we should try to remember to use the
inline style with the state and map functions to amke the hover effect work

- when we want to create a hover effect on a list in React think onMouseEnter and onMouseLeave to change the states
and inline style component that accepts a single object to create the hover effect.
- on the navbar we set the position to fixed

THE MOBILE PART OF THE NAVBAR:
- so the first thing that we do is to create to hamburger, we dont actually create it, we just set it to a font
awesome icon of a hamburger. we wrap the icon in a figure tag, this makes things more semantic. then on the figure
object we are going to add a onClick method, onClick(()=>setNavOpen(!navOpen)), the original value is false so when
we click for the first time we set it to true and on the second time we set it back to false and that continues.
- we add an active className on the ul className={navOpen?'active':''}, this means that if the navOpen button is set
to true then the className becomes active but if navOpen is false then the className is set to nothing.

- when we are in the smaller mobile design we want to have the positionset to a negative number so that it gets positioned
outside of the view of the page. in this case we set it to negative 260px, this is done by setting the left attribute
left:-240px
- so the styling is pretty complex and needs to be done little by little inorder to get it right.

THE SLIDING OPEN PART:
- we add a transition to the ul class in the media query:transition:300ms ease all
- we then have to create the active class that we are adding and removing to the ul every time we click the button
- so the active class is just going to override the existing style to make it slide out we do that by setting
left on the active class to 0;
- basically all it was doing was just adding a transition to the to the css change. so we just added that to the class


RECREATING THE NAVBAR:
-so the first thing I want to do is create a navBar component. this is already done, make it a functional one. And we give
it a className
2) then we want to add the basic styles so that it gives a large grey block across the screen. to make sass work, I added
the node sass npm I think this does the sass compiling its self and means we do not have to.
- we create the asset folder and create the nested scss folder inside of that one. For some Reason we are creating
a navBar.scss and then importing it into the base.scss. actually we then import the base.scss file into the index.js
file, this is the way that our styles get implemented, so we have everything on one file, makes sense now.
- I am un sure about how to use the sass

2) import React-Router-DOM and get that set up with the Browser Router and then have get the switch and Route
set up so that we can create a single page applicaiton.

3) create the list of objects  that will be given to the navBar and mapped over.

4) create the state in the NavBar component with the useState hook we are going to need to states, one will be the
state for the hovering effect and the other will be a toggle state for the when we press the button for the sideways
navbar. the NavIndex state will initially be set to -1 and the toggle state will initialy be set to false

5) start building out the HTML, so we know that it is going to be a ui with li elements inside of it. so we create
the ul and then to create all of the li that we need I think that we loop over it. the li has to contain a
a tag, since we are using react-dom-router. that will come from the Link component.
- we want a dynamic class on the nav element so that we can easily set the background color. a dynamic class is
when we kept track of the state to change the class name and we will use a inline style.

6) how we start actually styling. the ul and the nav tags both get an inline style called background. then on the
ul we set the height to 100% and then align items to center, we have to set the height to 100% or else it will not work.
the height 100% actually gives it space to work. instead minimum space that it needs. then we want to take the default
styles away from the li tags. So we style the ul by putting the the position to fixed, this will make the style stay
when we scroll and then we we set the height to 100% to get the will width of the screen and then we put the width to
300px, this will give us the little out crop and we set the flex-direction to row to make everything go vertical
instead of horizontal

7) add the icons, all we did was add the font awesome class name to the navLinks array of objects and then when
we mapped over it we and then displayed it in a i tag. Now we have to style them. first we just want to add some space
to them. the icons are on the wrong side of the li, so to fix this we go inside of the a tag, set display to flex and
then flex-direction to row-revers and that flips them to the other side. then we made the icons bigger and set the
font-size to 20px but this messed up the alignment of stuff but to fix that we just set, align-items to center;

8) the changing color on Hover. First we will have to add two javascript events on the li items, the onMouseEnter and the
onMouseLeave. onMouseEnter we want to set the hoverIndex set to the index on the map function. and then onMouseLeave we
want to set the hoverIndex back to -1. Then we want to set a dynamic style to change the color based on the hover index
value. I have the className beign added but I do not have the background being changed. we were able to do this with
setting the className dynamically but the tutorial does this through an inline style. the inline style was actually
a lot easier, all we had to do was just go:

                  style={{background: hoverIndex === index? (backHover || '#333') : ''}}

- all this is saying is that if the hoverIndex is equal to the index then we should set the background to backHover
or  if there is not backHover we set it to '#333'. If the values are not the same, then we set the background to
an empty string.


9) CREATING THE MOBILE VIEW: first thing that we have to do is to create the media query lets create on for 750

        @media only screen and (max-width: 750px){}

- this media query is saying that all of the stuff that is inside that block is going to apply only when the
screen is smaller than 750px. I am just not sure what to do on the styles.
- we add a figure tag with a hamburger icon inside of it. we add an onClick event handler to it and toggle the
value of navOpen.
- the value of the navOpen will allow us to have a value on the ul tag that will tell the nav to open.
- the nav bar its self is staying the same but the ul is the one that is being styled
- so we are left with 2 problems, one begin that the li is too small and the icons are on the wrong side. to fix
the li problem we are going to se the width to 100% and the padding left and rigt to none. I think we should always
try to make the inner items always fill the width of their contianer,this makes it so that we have more space to play
with.
- to make the icons switch we go inside of the a tag and set the flex-direction to row

- the last thing that we have to do is the transition. so to start we se the margin left to -230px so that it looks like
its closed.
- to create the transition on the ul we add a transition of 300ms ease all;
---------------------------------------------------------------------------------------------------------------------------
BUGS:
 1) the navigation is in a position absolute state and the other elements are not reconizing it, I bet its the fixed positioning.
reason: its was do to the navigation being placed as fixed.
solution: I just deleted it for now. not really that big of a problem.
---------------------------------------------------------------------------------------------------------------------------


CREATING THE CARDS:
- I think that this is something that I can do so I will try to do it first.

1) create the fake data that we are going to use to loop over, it will mimic data that has come from an api.

2) create the mobile view. I did this and it was actually pretty easy, all of the inspiration from online eccommerce shops are
pretty barebones for styling.


CREATING THE NEXT BREAK POINT:
- the next break point is at 768px the only thing that I am concerned about is how do I create a media query that will allow me
create the grid that I want. So I will have to do some google searches on how to create a responsive grid
-flex is shorthand for flex-grow, flex-shirk and flex-basis combined
- we just added a css grid and that made everything work ok, so thats bueno

DETECTING THE CLICK OUTSIDE OF A BOX:
- so this is what we have to do:
1) create a reference to the outer div
2) add event listener mousedown(or click) to the document whenever this component is appear on screen(mount) and remove
it on the unmount too
3)inside the event(handleClick) this.node.contains(e.target) will return true if whatever we are clicking is inside of
the 'node' ref

- so we need to create a reference to the outer div
- refs are created with the React.createRef() and is attached to React elements via the ref attribute. Refs are
commonly assigned to an instance property when a component is constructed so they can be referenced throughout
the component
- so we create the react ref with React.createRef() and assign it to a variable. then it is attached to
React element via the ref attribute
      myRef = React.createRef();
          return <div ref={this.myRef} />

- when a ref is rendered a reference to the node becomes accessible at the current attribute of the ref
      const node = myRef.current

- the value of ref changes depending on the node type
- When the ref attribute is used on a custom class component, the ref object recieves the mounted instance of
the component as its current

- so when we use the React.createRef() on our custom component the ref object recieves the mounted instance of
the component as its current
- so the ref that we will create will reference the custom component, we can not use a ref attribute on function
components
- so I guess there is a useRef hook in React
- it returns a mutable object whose .current property is initialized to the passed argument
- the returned object will persist for the full lifetime of the component.

    const refContainer = useRef(initialValue);

- so the .current value on the ref(which is the reference to the node) is whatever is provided as the initial value
- we creat the ref and then assign it to a react element and then once we have attached it to a element we are
able to access the elements dom value throuhg the .current property on the ref
- the useRef() hook isnt just for DOM refs. The "ref" object is a generic container whose current property is mutable
and can hold any value, similar to an instance property on a class. But I do not think I will be using this
- so we will create the ref on the navbar component and assign it to the ul element, then we will create a onlick
listener to check if our click was on the ul or not, if it was then do nothing but if it wasnt then we should set the
openNav to false
- we are passing useRef null but I am not sure why. what even is null, its a primative that identifies as an object(error)
- we accessing the dom node with the ref we go .current.focus()

1) add the a event listener to the document. This is done through noraml javascript.
    document.addEventListener('click', handleClick)

  - this will add a event listener on the whole document. this means that anywhere that we click, the event is going
  to fire
  - when we pass null to the ref component we are initially setting it to null but when we assign it to the element it
  will take on the value of that document
  - the main magic of everything is this:

          if(ref.current && !ref.current.contains(event.target))

- so the ref.current is our ul element(what we put the ref on) the ref.current.contains(event.target) checks to
see if the ref contains what we just clicked on. So the full thing is saying that if the current ref(the ul)
and the ul does not contain the place we clicked, then we should do something

so this is going to happen:
1) we are going to create the ref and assign it to the element that we want to check against
2)import useEffect hook and set it up
3)inside of useEffect use document.addEventListener('click',handleClick),this will add an event listener to the
whole document
4) in the return value of useEffect put document.removeEventListener('click',handleClick), useEffect will run the
function that is returned by it and it will be ran when it is time to clean up. React performs the cleanup when
the component unmounts, React also cleans up effects from the previous render before running the effect next time
5)add an empty dependency array, this tells React React that our effect doesnt depend on any values from props or state
so it never needs to re-run. So I have messed something up somewhere.
6) create the handleClick function
            if(ref.current && !ref.current.contains(event.target)){console.log('not inside')}

- so step one is definitely create the ref using useRef hook
-so for some weird reason, my mouse event is being ran twice.
-so I think it has to do with the fact that the HTML will automaticaly fire its own event, so we will fire once with
our event and then fire again by itsself with nothing. so I need to protect against it
- we can protect against the undefined value by using the && symbol.
- so I kind of had to hack around it but for now it will work.



EFFECTS WITH CLEANUP:
-it is important to clean up so that we don't introduce a memory leak. a memory leak occurs when you change the state
of an unmounted component.
- but this means that if we using anything that wont be cleaned up, then we have to do it ourselfs.
-document.eventlisteners need to be unmounted. unsubscribing from data subscriptions need to be instantiated and
cancelling a timeout interval that is no longer needed. so basically anything that is outside of the standard
react lifecycle, then we need to clean it up


CREATING THE CHECKOUT PAGE:
-right now we are creating the banner for the checkout page, we want the words to fade in and out continously
we are going to use setInterval

    setInterval(func,[delay],[arg1],[arg2])

- the func is a function or a string of code to be executed
- the delay is the delay before the function runs
- [arg1],[arg2] these arguments are arguments fof the function but I dont think we will need them

- what do we want the funciton to do ? we want a function that will take in an array of keywords and they display
them one after the other.
- so we want the function to return one word, wait 2000ms and then return the next  untill there is no words in
the list left

- so have an outer function that takes the array.
- maybe instead of trying to be cleaver I could see if react-transition-group has anything that could work for this

REACT TRANSITION GROUP:
- I think since we will be using css transitions that we should use the CSS transition. the CSS transition applies a
pair of class names during the appear, enter and exit states of the transition

- so we wrap what we want to animate with the CSSTransition component and set a in and timout state in the props of
that component. Whatever is in the CSSTransition component will be the thing that is getting rendered but only when
the in prop is set to true
- the classes that we get are enter, enter-active, exit and exit-active

- the active class represents which styles we want to animate to, so we should add transition declaration only to them
otherwise transitions might not behave like we want them to

- we should use the Transition component when we need to animate the mounting and unmounting of a component using styling
in Javascript. If we want to use CSS styling(which we do) we should use the CSSTransition component.

- ok well lets just give this stuff a try and see how it goes and then we can worry about how to get the rest working
when we get there.

- css applies a pair of class names during the appear,enter, and exit states of the transition. The first class
is applied and then a second-active class in order to activate the CSS transition.
- so when the in prop is set to true,the child component will recieve the class example-enter , then example-enter-active
- so for use the first class that it will get is node-enter and then node-enter-active

- CSSTransition applies a pair of class names during the appear, enter and exit states of the transition group.
- so CSSTransition has 3 states, appear, enter and exit. the first class is applied and then the second which is
the active one, so it goes; enter and then enter-active, then appear and the appear-active, finally we get exit and
exit-active.
-the active class represents which styles we want to animate, so we should add the transition delaration only to them
- I think to make the transition work on page load, we have to wrap it inside of a Transition component

TRANSITION:
-transition is used to animate mounting and unmounting of a component
- so now we have created a new new component for each piece of data and that means that we can use the transition
component
- so we will be able to animate the mounting and unmounting of our component
- transition does not alter the behaviour of the component it renders, it just tracks the enter and the exit
for the components, it is up to us to give the meaning and effect to those states. this means that
we can add styles to a componnet when it enters or exist

- there are 4 main states a transition can be in.
1) entering
2)entered
3)exiting
4)exited
- the transition state is toggled via the in prop. When true the component begins the "enter" stage and then
it changes state for a duration that we specify

- the reason that none of my transitons have been working is because of the fact that I havent had a key
